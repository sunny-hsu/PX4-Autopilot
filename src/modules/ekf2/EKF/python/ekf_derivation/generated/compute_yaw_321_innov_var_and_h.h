// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_yaw_321_innov_var_and_h
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix24_24
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov_var: Scalar
 *     H: Matrix24_1
 */
template <typename Scalar>
void ComputeYaw321InnovVarAndH(const matrix::Matrix<Scalar, 24, 1>& state,
                               const matrix::Matrix<Scalar, 24, 24>& P, const Scalar R,
                               const Scalar epsilon, Scalar* const innov_var = nullptr,
                               matrix::Matrix<Scalar, 24, 1>* const H = nullptr) {
  // Total ops: 76

  // Input arrays

  // Intermediate terms (11)
  const Scalar _tmp0 = std::pow(state(0, 0), Scalar(2)) + std::pow(state(1, 0), Scalar(2)) -
                       std::pow(state(2, 0), Scalar(2)) - std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp1 =
      _tmp0 + epsilon * (2 * math::min<Scalar>(0, (((_tmp0) > 0) - ((_tmp0) < 0))) + 1);
  const Scalar _tmp2 = 2 / _tmp1;
  const Scalar _tmp3 = state(0, 0) * state(3, 0) + state(1, 0) * state(2, 0);
  const Scalar _tmp4 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp5 = 4 * _tmp3 / _tmp4;
  const Scalar _tmp6 = _tmp4 / (4 * std::pow(_tmp3, Scalar(2)) + _tmp4);
  const Scalar _tmp7 = _tmp6 * (_tmp2 * state(1, 0) + _tmp5 * state(2, 0));
  const Scalar _tmp8 = _tmp6 * (_tmp2 * state(2, 0) - _tmp5 * state(1, 0));
  const Scalar _tmp9 = _tmp6 * (_tmp2 * state(3, 0) - _tmp5 * state(0, 0));
  const Scalar _tmp10 = _tmp6 * (_tmp2 * state(0, 0) + _tmp5 * state(3, 0));

  // Output terms (2)
  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var = R +
                 _tmp10 * (P(0, 3) * _tmp9 + P(1, 3) * _tmp8 + P(2, 3) * _tmp7 + P(3, 3) * _tmp10) +
                 _tmp7 * (P(0, 2) * _tmp9 + P(1, 2) * _tmp8 + P(2, 2) * _tmp7 + P(3, 2) * _tmp10) +
                 _tmp8 * (P(0, 1) * _tmp9 + P(1, 1) * _tmp8 + P(2, 1) * _tmp7 + P(3, 1) * _tmp10) +
                 _tmp9 * (P(0, 0) * _tmp9 + P(1, 0) * _tmp8 + P(2, 0) * _tmp7 + P(3, 0) * _tmp10);
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 24, 1>& _H = (*H);

    _H.setZero();

    _H(0, 0) = _tmp9;
    _H(1, 0) = _tmp8;
    _H(2, 0) = _tmp7;
    _H(3, 0) = _tmp10;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
